class SatTester : ZilchComponent
{
  [Property] var Shape0Path = CogPath();
  [Property] var Shape1Path = CogPath();
  
  [Property] var MinkowskiDiffCogPath = CogPath();
  // What SAT axis to debug draw / print. This might be a face or an edge axis
  [Property] var TargetTestIndex : Integer = 0;
  
  [Property] var DrawAllEdges : Boolean = true;
  [Property] var EarlyOut : Boolean = false;
  [Property] var DebugDrawEdgeFace : Boolean = false;
  [Property] var DebugDrawEdgeMinkowskiFace : Boolean = false;
  
  [Property] var PointSize : Real = 0.02;
  
  // Used to change the gauss map sphere's color based upon if the edges intersect
  [ShaderInput] var AlbedoValue : Real4 = Colors.DimGray;
  
  // What SAT axis we have currently run.
  var TestedAxesA : Integer;
  var TestedAxesB : Integer;
  var CurrentTestAxisIndex : Integer = 0;
  var ValidAxisIndex : Integer = 0;
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    Zero.Connect(Zero.Keyboard, Events.KeyUp, this.OnKeyUp);
  }

  function OnKeyUp(event : KeyboardEvent)
  {
    if(event.Key == Keys.Minus || event.Key == Keys.Subtract)
      --this.TargetTestIndex;
    if(event.Key == Keys.Equal || event.Key == Keys.Add)
      ++this.TargetTestIndex;
  }
  
  function UpdateMinkowskiAxis()
  {
    var targetFaceOverride = this.MinkowskiDiffCogPath.TargetFaceOverride;
    if(targetFaceOverride != null)
      targetFaceOverride.TargetFaceIndex = this.ValidAxisIndex;
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    var poly0 = this.Shape0Path.PolyedronShape;
    var poly1 = this.Shape1Path.PolyedronShape;
    if(poly0 == null || poly1 == null)
      return;
    
    var result = this.Run(poly0, poly1);
  }
  
  function Run(poly0 : PolyedronShape, poly1 : PolyedronShape) : Boolean
  {
    this.TestedAxesA = 0;
    this.TestedAxesB = 0;
    this.CurrentTestAxisIndex = 0;
    this.ValidAxisIndex = -1;
    this.UpdateMinkowskiAxis();
    this.ValidAxisIndex = 0;
    this.AlbedoValue = Colors.DimGray;
    
    poly0.Owner.TargetFaceOverride.TargetFaceIndex = -1;
    poly1.Owner.TargetFaceOverride.TargetFaceIndex = -1;
    
    var satTest = SatTest();
    satTest.EarlyOut = this.EarlyOut;
    satTest.EdgeLogCallback = this.EdgeLogCallback;
    satTest.FaceLogCallback = this.FaceLogCallback;
    return satTest.Test(poly0, poly1);
  }
  
  function FaceLogCallback(logInfo : SatFaceLogInfo)
  {
    if(this.CurrentTestAxisIndex == this.TargetTestIndex)
    {
      var faceIndex = this.TestedAxesA;
      if(logInfo.Poly.Owner != this.Shape0Path.Cog)
        faceIndex = this.TestedAxesB;
      
      this.UpdateMinkowskiAxis();
      var satFace = logInfo.Face;
      var mesh = logInfo.Poly.Mesh;
      var face = mesh.Faces[logInfo.FaceIndex];
      var transform = logInfo.Poly.Owner.Transform;
      
      // Change the color based upon if the objects are separating on this axis
      var color = Colors.Red;
      if(logInfo.Separation > 0)
        color = Colors.Blue;
        
      var faceOverride = logInfo.Poly.Owner.TargetFaceOverride;
      faceOverride.TargetFaceIndex = faceIndex;
      faceOverride.TargetFaceColor = color;
        
      // Draw the face normal at the center of the face
      var faceInfo = mesh.ComputeNormalAndCenter(face);
      var worldNormal = transform.TransformNormal(faceInfo.Normal);
      var worldCenter = transform.TransformPoint(faceInfo.Center);
      DebugDraw.Add(DebugLine(worldCenter, worldCenter + worldNormal) {HeadSize = 0.05, Color = color});
      
      // Draw the vertex on the gauss map
      this.DrawVertex(worldNormal, Colors.Black);
    }
    
    if(logInfo.Poly.Owner == this.Shape0Path.Cog)
      ++this.TestedAxesA;
    else
      ++this.TestedAxesB;
      
    ++this.ValidAxisIndex;
    ++this.CurrentTestAxisIndex;
  }
  
  function EdgeLogCallback(logInfo : SatEdgeLogInfo)
  {
    if(!logInfo.IsMinkowski && this.DrawAllEdges == false)
      return;
      
    if(this.CurrentTestAxisIndex == this.TargetTestIndex)
    {
      if(logInfo.IsMinkowski)
      {
        this.AlbedoValue = Colors.White;
        this.UpdateMinkowskiAxis();
      }
      else
        this.AlbedoValue = Colors.DimGray;
        
      var radius = 0.51;
      var edge0 = logInfo.Edge0;
      var edge1 = logInfo.Edge1;
      
      this.DrawEdge(edge0, radius, 1, Colors.Red);
      this.DrawEdge(edge1, radius, -1, Colors.Blue);
      
      if(this.DebugDrawEdgeFace)
      {
        var center = this.MinkowskiDiffCogPath.Transform.WorldTranslation;
        var p00 = edge0.Vertex0 - edge1.Vertex0 + center;
        var p01 = edge0.Vertex0 - edge1.Vertex1 + center;
        var p10 = edge0.Vertex1 - edge1.Vertex0 + center;
        var p11 = edge0.Vertex1 - edge1.Vertex1 + center;
        DebugDraw.Add(DebugLine(p00, p01) {OnTop = true});
        DebugDraw.Add(DebugLine(p01, p11) {OnTop = true});
        DebugDraw.Add(DebugLine(p11, p10) {OnTop = true});
        DebugDraw.Add(DebugLine(p10, p00) {OnTop = true});
      }
      
      if(this.DebugDrawEdgeMinkowskiFace)
      {
        var edgeDir0 = edge0.GetEdgeDir();
        var edgeDir1 = edge1.GetEdgeDir();
        
        // Compute the edge normal (always make it point from obj0 out)
        var normal = Math.Normalize(Math.Cross(edgeDir0, edgeDir1));
        //var normal = Math.Cross(edge0.FaceNormal0, edge0.FaceNormal1);
        this.DrawPlane(edge0.GetCenter(), normal, 1);
      }
    }
    if(logInfo.IsMinkowski)
    {
      ++this.ValidAxisIndex;
    }
    
    ++this.CurrentTestAxisIndex;
  }
  
  function DrawEdge(edge : SatEdge, radius : Real, sign : Real, color : Real4)
  {
    var v0 = edge.Vertex0;
    var v1 = edge.Vertex1;
    DebugDraw.Add(DebugLine(v0, v1) {Color = color});
    // Draw the points on the original shapes
    DebugDraw.Add(DebugSphere(v0, this.PointSize) {Color = color});
    DebugDraw.Add(DebugSphere(v1, this.PointSize) {Color = color});
    
    var n0 = edge.FaceNormal0 * sign;
    var n1 = edge.FaceNormal1 * sign;
    // Draw the edge gauss map
    this.DrawVertex(n0, color);
    this.DrawVertex(n1, color);
    this.DrawArc(n0, n1, radius, color);
  }
  
  function DrawPlane(center : Real3, normal : Real3, size : Real)
  {
    var up = Math.Cross(Math.Cross(Real3.YAxis, normal), normal);
    normal = Math.Normalize(normal);
    up = Math.Normalize(up);
    var rotation = Math.ToQuaternion(normal, up);
    var p0 = center + size * Math.Multiply(rotation, Real3(0.5, 0.5, 0));
    var p1 = center + size * Math.Multiply(rotation, Real3(0.5, -0.5, 0));
    var p2 = center + size * Math.Multiply(rotation, Real3(-0.5, -0.5, 0));
    var p3 = center + size * Math.Multiply(rotation, Real3(-0.5, 0.5, 0));
    
    var edgeColor = Colors.Black;
    var planeColor = Real4(0.5);
    DebugDraw.Add(DebugLine(p0, p1) {Color = edgeColor});
    DebugDraw.Add(DebugLine(p1, p2) {Color = edgeColor});
    DebugDraw.Add(DebugLine(p2, p3) {Color = edgeColor});
    DebugDraw.Add(DebugLine(p3, p0) {Color = edgeColor});
    DebugDraw.Add(DebugTriangle(p0, p1, p2) {Filled = true, Color = planeColor});
    DebugDraw.Add(DebugTriangle(p0, p2, p3) {Filled = true, Color = planeColor});
  }
  
  function DrawArc(p0 : Real3, p1 : Real3, radius : Real, edgeColor : Real4)
  {
    p0 = Math.Normalize(p0);
    p1 = Math.Normalize(p1);
    var center = this.Owner.Transform.WorldTranslation;
    
    var mid = Math.Slerp(p0, p1, 0.5);
    p0 = p0 * radius + center;
    p1 = p1 * radius + center;
    mid = mid * radius + center;
    DebugDraw.Add(DebugArc(p0, mid, p1) { Color = edgeColor});
  }
  
  function DrawVertex(vertex : Real3, vertexColor : Real4)
  {
    vertex = Math.Normalize(vertex);
    var center = this.Owner.Transform.WorldTranslation;
    var radius = 0.51;
    var point = center + radius * vertex;
    DebugDraw.Add(DebugSphere(point, 0.01) {Color = vertexColor});
  }
}

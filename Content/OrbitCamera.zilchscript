////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2017 DigiPen USA Corporation, All Rights Reserved
// Author: Zero Engine Team
// Last updated by: Arend Danielek
// Last update: 1/5/2017
////////////////////////////////////////////////////////////////////////////////////////////////////////////

// A camera that orbits around a focal point. Rotates with right mouse and pans with left mouse.
// Zooms in and out towards the focal point with the scroll wheel.
class OrbitCamera : ZilchComponent
{
  [Dependency] var Camera : Camera;
  
  [Property] var RotationSensitivity : Real = 0.01;
  
  [Property] var TranslationSensitivity : Real = 0.1;
  
  [Property] var PanSensitivity : Real = 3.0;
  
  // The minimum radius on the sphere. This controls the max that the camera can zoom in.
  [Property] var MinDistance : Real = 1.0;
  // The maximum radius on the sphere. This controls the max that the camera can zoom out.
  [Property] var MaxDistance : Real = 100.0;
  // Where the camera is looking at.
  [Property] var Target : Real3 = Real3(0.0, 0.0, 0.0);
  // The radius of the sphere that we are orbiting about. Controls the current zoom level.
  [Property] var Radius : Real = 5.0;
  
  // Spherical coordinates. These control our position on the sphere we're rotating about.
  var Phi : Real = Math.Pi * 0.5;
  var Theta : Real = Math.Pi * 0.5;
  
  // Used to store mouse state so we can use it during logic update.
  var MouseDelta : Real2 = Real2(0.0, 0.0);
  
  // We avoid being able to flip the camera upside-down by controlling the
  // maximum angle we can travel towards the poles on the rotation sphere.
  var RotationDeadZone : Real = 0.01;
  
  function Initialize(initializer : CogInitializer)
  {
    // We do all of our transform update logic during logic update
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    
    // Connect on the viewport for all the mouse events we need
    Zero.Connect(this.Space, Events.MouseMove, this.OnMouseMove);
    Zero.Connect(this.Space, Events.MouseScroll, this.OnMouseScroll);
  }
  
  function OnLogicUpdate(updateEvent : UpdateEvent)
  {
    // If the right mouse is down then we update our position on the
    // rotation sphere. This is controlled by the movement of the mouse.
    if(Zero.Mouse.IsButtonDown(MouseButtons.Right))
    {
      this.Phi -= this.MouseDelta.Y * this.RotationSensitivity;
      // Clamp the pole angle so that we don't flip the camera upside-down
      this.Phi = Math.Clamp(this.Phi, this.RotationDeadZone, Math.Pi - this.RotationDeadZone);
      this.Theta += this.MouseDelta.X * this.RotationSensitivity;
    }
    
    // Calculate the position of the camera using spherical coordinates
    var cameraDir = Real3();
    cameraDir.X = this.Radius * Math.Cos(this.Theta) * Math.Sin(this.Phi);
    cameraDir.Y = this.Radius * Math.Cos(this.Phi);
    cameraDir.Z = this.Radius * Math.Sin(this.Theta) * Math.Sin(this.Phi);
    
    // Since we're looking at our target, the forward vector is just the
    // opposite of our position vector on the unit sphere
    var forward = -cameraDir;
    forward = Math.Normalize(forward);
    
    // Compute the forward and right vector of the camera in world space
    var movementForward = forward;
    var movementRight = Real3(-forward.Z, 0.0, forward.X);
    
    // Build up the total world space movement of the camera
    var movementW = Real3();
    
    // Move the target point along the camera's forward and right projected onto the camera's x-z plane 
    if(this.Owner.Camera.CameraViewportCog.CameraViewport.ViewportHasFocus)
    {
      if(Zero.Keyboard.KeyIsDown(Keys.W))
        movementW += movementForward;
      else if(Zero.Keyboard.KeyIsDown(Keys.S))
        movementW -= movementForward;
      if(Zero.Keyboard.KeyIsDown(Keys.A))
        movementW -= movementRight;
      else if(Zero.Keyboard.KeyIsDown(Keys.D))
        movementW += movementRight;
    }
    
    // Scale the movement by sensitivity
    movementW = movementW * this.PanSensitivity;
    
    // Compute the basis of the camera
    var up = Real3.YAxis;
    
    // Use the world up and camera's forward to get the right vector
    var right = Math.Cross(forward, up);
    right = Math.Normalize(right);
    
    // Now use the camera forward and right to get the camera's actual up vector
    up = Math.Cross(right, forward);
    up = Math.Normalize(up);
    
    // If left mouse is down, then we'll use the mouse
    // movement to pan along the camera's x and y vector
    if(Zero.Mouse.IsButtonDown(MouseButtons.Left))
    {
      movementForward = up;
      movementRight = right;
      
      movementW += movementForward * this.MouseDelta.Y;
      // We negate the x mouse delta because we want to move the mouse
      // left and have the camera move to the right
      // (dragging the background to the left is the same as moving the camera to the right)
      movementW += movementRight * -this.MouseDelta.X;
    }
    
    // Compute the sensitivity for tranlational movement, this is based upon
    // how far zoomed out we are (so we move faster when we're more zoomed out)
    var moveSensitivity = 2.0 + this.TranslationSensitivity * this.Radius;
    // When translating, we move our target position (which implicitly moves our position)
    this.Target += movementW * updateEvent.Dt * moveSensitivity;
    // Set our position to be focused on our target, but back along our
    // view vector based upon the sphere's current radius
    var transform = this.Owner.Transform;
    transform.Translation = this.Target + cameraDir;
    
    // Set the rotation bases for our camera
    transform.SetRotationBases(forward, up, right);
    
    // Make sure to clear out the translational delta of the mouse
    this.MouseDelta = Real2.Zero;
  }
  
  function OnMouseMove(viewportMouseEvent : ViewportMouseEvent)
  {
    this.MouseDelta = viewportMouseEvent.Movement;
  }
  
  function OnMouseScroll(viewportMouseEvent : ViewportMouseEvent)
  {
    // Just adjust the radius by the scroll wheel (this could be
    // modified to be an exponential zoom which tends to feel nicer)
    this.Radius -= viewportMouseEvent.Scroll.Y;
    this.Radius = Math.Clamp(this.Radius, this.MinDistance, this.MaxDistance);
  }
}

class QuickHullVertexQueryEvent : ZilchEvent
{
  var Vertices : Array[Real3] = null;
  var TestName : String = "Test";
  sends QueryQuickHullVertices : QuickHullVertexQueryEvent;
}

class QEdge
{
  var Vertex : Integer;
  var Twin : Integer;
  var Face : Integer;
}

class QFace
{
  var Edges = Array[Integer]();
}

class QFaceInfo
{
  var Normal : Real3;
  var Center : Real3;
}

class QMesh
{
  var Vertices = Array[Real3]();
  var Edges = Array[QEdge]();
  var Faces = Array[QFace]();
  
  var FaceNormals = Array[Real3]();
  var UniqueEdges = Array[QEdge]();
  
  function Compute(mesh : Mesh)
  {
    var collector = VertexCollector();
    var meshVertices = collector.GetVertices(null, mesh);
    var quickHull = QuickHull3D();
    foreach(var vertex in meshVertices)
      quickHull.Add(vertex);
    if(!quickHull.Build())
      return;
    
    this.Store(quickHull);
  }
  
  function Store(quickHull : QuickHull3D)
  {
    this.Vertices.Clear();
    this.Edges.Clear();
    this.Faces.Clear();
    this.FaceNormals.Clear();
    this.UniqueEdges.Clear();
    
    var qMesh = quickHull.Mesh;
    
    var vertices = qMesh.Vertices;
    var edges = qMesh.Edges;
    var faces = qMesh.Faces;
    
    for(var i = 0; i < vertices.Count; ++i)
      this.Vertices.Add(vertices[i]);
    for(var i = 0; i < edges.Count; ++i)
    {
      var edge = edges[i];
      this.Edges.Add(QEdge() {Vertex = edge.VertexIndex, Twin = edge.TwinIndex, Face = edge.FaceIndex});
    }
    for(var i = 0; i < faces.Count; ++i)
    {
      var face = faces[i];
      var qFace = QFace();
      for(var eI = 0; eI < face.Edges.Count; ++eI)
      {
        qFace.Edges.Add(face.Edges[eI]);
      }
      this.Faces.Add(qFace);
    }
    
    this.Cache();
  }
  
  function Cache()
  {
    foreach(var face in this.Faces)
      this.FaceNormals.Add(this.ComputeNormalAndCenter(face).Normal);
      
    for(var i = 0; i < this.Edges.Count; ++i)
    {
      var edge = this.Edges[i];
      if(edge.Twin < i)
        continue;
        
      this.UniqueEdges.Add(edge);
    }
  }
  
  function ComputeNormalAndCenter(face : QFace) : QFaceInfo
  {
    // Use Newell's method to compute the face normal.
    var result = QFaceInfo();
    if(face.Edges.Count == 0)
      return result;

    var prevEdge = this.Edges[face.Edges[face.Edges.LastIndex]];
    var count = 0;
    for(var i = 0; i < face.Edges.Count; ++i)
    {
      var edgeIndex = face.Edges[i];
      var currEdge = this.Edges[edgeIndex];
      var p0 = this.Vertices[prevEdge.Vertex];
      var p1 = this.Vertices[currEdge.Vertex];
      var diff = p0 - p1;

      result.Normal.X += (p0.Y - p1.Y) * (p0.Z + p1.Z);
      result.Normal.Y += (p0.Z - p1.Z) * (p0.X + p1.X);
      result.Normal.Z += (p0.X - p1.X) * (p0.Y + p1.Y);
      result.Center += p1;
      ++count;
      prevEdge = currEdge;
    }

    result.Normal = Math.Normalize(result.Normal);
    result.Center /= count;
    return result;
  }
  
  // Find the point furthest in the given direction local-space direction
  function Search(localDir : Real3) : Real3
  {
    var maxDistance = Real.NegativeMin;
    var maxVertex = Real3();
    foreach(var vertex in this.Vertices)
    {
      var distance = Math.Dot(vertex, localDir);
      if(distance > maxDistance)
      {
        maxDistance = distance;
        maxVertex = vertex;
      }
    }
    return maxVertex;
  }
  
  // Find the point furthest in the given direction world-space direction
  function Search(worldDir : Real3, transform : Transform) : Real3
  {
    var localDir = transform.TransformNormalInverse(worldDir);
    var localPoint = this.Search(localDir);
    return transform.TransformPoint(localPoint);
  }
}
